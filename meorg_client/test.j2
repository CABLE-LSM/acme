"""{{file_doc}}"""

class Client:

    def __init__(self, {{base_url}}, email=None, password=None):
        self.base_url = {{base_url}}
        self.headers = dict()

        if email is not None and password is not None:
            self.login({{email}}, {{password}})

    def _make_request(self, method: str, endpoint: str, data: dict=None, headers: dict=None) -> Union[dict, requests.Response]:
    """Make the request

    Parameters
    ----------
    method : str
        Method name (GET, POST, PUT, UPDATE, DELETE)
    endpoint : str
        URL slug to add to the base url.
    data : dict, optional
        Key/value pairs of data to send., by default None
    headers : dict, optional
        Headers to add to the request, by default None

    Returns
    -------
    dict or requests.Response
        Decoded JSON response, or raw response.

    Raises
    ------
    Exception
        Raised when there is an issue.
    """

    # Cast to uppercase, for consisency
    method = method.upper()

    if method not in VALID_METHODS:
        raise Exception(f'Invalid method {method}')

    # GET/PUT requests have the data interpolated into the url
    if method in ['GET', 'PUT']:
        endpoint = endpoint.format(data)

    url = f"{self.base_url}/{endpoint}"
    all_headers = {**self.headers, **headers} if headers else self.headers
    response = requests.request(method, url, data=data, headers=all_headers)

    if response.status_code == 200:

        # Return JSON if that's what it is (this should be the default)
        if response.headers.get('Content-Type', str) == 'application/json':
            return response.json()
        
        return response

    else:
        raise Exception(f"Request failed with status code {response.status_code}: {response.text}")

    {% for url, path_config in paths.items() %}
    def {{url}}({% for arg, dtype, default in path_config['args'] %}{{arg}}:{{dtype}}={{default}}{% endfor %}):
        
        return self._make_request(
            method='{{path_config['method']}}',
            
        )

    {% endfor %}

